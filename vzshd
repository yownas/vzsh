#!/bin/sh

#
# This script is supposed to be run by the sshd in the vz-host
# Users public keys need to be distributed to each vz-host and a vzshd.ini
# need to be configured to set permissions.
#

############################
# Variables
############################

vzshdini=~/.vz/vzshd.ini

############################
# Functions
############################

usage() {
        cat <<EOF
VZ shell daemon

Usage: $0 ...

Actions:

Commandline:
  init
    Generate $vzshdini template.

From vzsh:
  hostrun [command]
    Run command on local host.

  list
    Show list of all containers.

  move ct host
    Move container to another host.

  run ct [command]
    Run command in container.

  start ct
  stop ct
    Start or stop a container.
EOF
}

# vz_runas user ct
# Check which user to run as in ct
vz_runas() {
  export tmp_user=$1
  export tmp_ct=$2

  # Create search-string from ini-file
  searchuser_str=`
    # Get all non-coment lines
    grep -v "^#" $vzshdini | \

    # Print lines under [groups]
    awk '/^\[/{p=0}/^\[groups\]$/{p=1}{if(p)print "@"$0","}' | \
    egrep -v '^\[|^,$' | \

    # Grep for current user
    grep "[:,]$tmp_user," | \

    # Make search-string from groups and user.
    awk -F: '{printf "^"$1"=.*$|"}END{print "^"ENVIRON["tmp_user"]".*$"}'`

  vz_return=`
    # Search the containers for user/group return user to run as
    grep -v "^#" $vzshdini | \

    # Print lines under [containers]
    awk '/^\[/{p=0}/^\[containers\]$/{p=1}{if(p)print $0}' | \
    egrep -v '^\[|^$' | \

    # Get container or *
    egrep "^$tmp_ct:|^\*:" | \

    # Get the list of all users/groups
    cut -d: -f2|tr , '\012' | \

    # Try to find user or users groups
    egrep $searchuser_str | \

    # Only parse lines where there is a runas-user set
    grep = | cut -d= -f2`

  [ "$vz_return" == "" ] && vz_return="root"
}


# vz_checkperm user ct
# Check persmissions for user
vz_checkperm() {
  export tmp_user=$1
  export tmp_ct=$2
  vz_return=noperm

  # I'm so sorry for this... /Jonas
  (grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[containers\]$/{p=1}{if(p)print $0}'|egrep -v '^\[|^$'|egrep "^$tmp_ct:|^\*:"|cut -d: -f2|tr , '\012'|sed 's/=.*$//'|egrep `grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[groups\]$/{p=1}{if(p)print "@"$0","}'|egrep -v '^\[|^,$'|grep "[:,]$tmp_user,"|awk -F: '{printf "^"$1"$|"}END{print "^"ENVIRON["tmp_user"]"$"}'` > /dev/null) && vz_return=allowed

  # The line above checks .vz/vzshd.ini and sets vz_return to allowed
  # if the user or a group the user belong to has access to a container.
}

# vz_checkmanager user permission
# Check manager persmissions for user
vz_checkmanager() {
  export tmp_user=$1
  export tmp_perm=$2
  vz_return=noperm

  # I'm so sorry for this... /Jonas
  (grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[manager\]$/{p=1}{if(p)print $0}'|egrep -v '^\[|^$'|egrep "^$tmp_perm:"|cut -d: -f2|tr , '\012'|egrep `grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[groups\]$/{p=1}{if(p)print "@"$0","}'|egrep -v '^\[|^,$'|grep "[:,]$tmp_user,"|awk -F: '{printf "^"$1"$|"}END{print "^"ENVIRON["tmp_user"]"$"}'` > /dev/null) && vz_return=allowed

  # The line above checks .vz/vzshd.ini and sets vz_return to allowed
  # if the user or a group the user belong to has access to a container.
}


# vz_checkperm_host user
# Check persmissions for user
vz_checkperm_host() {
  export tmp_user=$1
  vz_return=noperm

  # Again... I'm so sorry for this... /Jonas
  grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[hosts\]$/{p=1}{if(p)print $0}'|egrep -v '^\[|^$'|egrep "^`hostname`:|^localhost:"|cut -d: -f2|tr , '\012'|egrep `grep -v "^#" $vzshdini|awk '/^\[/{p=0}/^\[groups\]$/{p=1}{if(p)print "@"$0","}'|egrep -v '^\[|^,$'|grep "[:,]$tmp_user,"|awk -F: '{printf "^"$1"$|"}END{print "^"ENVIRON["tmp_user"]"$"}'` > /dev/null && vz_return=allowed

  # The line above checks .vz/vzshd.ini and sets vz_return to allowed
  # if the user or a group the user belong to has access to the local host.
}

# vz_parse options ...
# Parse arguments from ssh-key or commandline
vz_parse_arg() {
  for opt in $*; do
    case "$opt" in
      init) action=init; shift;;
      user=*) user=${1#user=}; shift;;
      --) shift; break;;
    esac
  done
}

# vz_parse options ...
# Parse arguments from client
vz_parse() {
  for opt in $*; do
    case "$opt" in
      hostrun) action=hostrun; shift; ccmd=$*; break;;
      list) action=list; shift;;
      move) action=move; shift; ct=$1; shift; otherhost=$1; break;;
      run) action=run; shift; ct=$1; shift; ccmd=$*; break;;
      start) action=start; shift; ct=$1; break;;
      stop) action=stop; shift; ct=$1; break;;
      --) shift; break;;
    esac
  done
}


############################
# Main
############################

# Default values
action=usage
user=nobody

# Parse arguments
vz_parse_arg $*

# Parse command
vz_parse $SSH_ORIGINAL_COMMAND

case "$action" in
  hostrun)
    # Run command/start shell on host.
    vz_checkperm_host $user
    if [ "$vz_return" == "allowed" ]
    then
      if [ "$ccmd" == "" ]
      then
        /bin/bash -i
      else
        $ccmd
      fi
    else
      echo "$0: permission denied for $user@localhost" 
      exit 1
    fi
    break;;
  init)
    if [ \! -f "$vzshdini" ]
    then
      mkdir -p ${vzshdini%/[^/]*}
      cat > $vzshdini <<EOF
# Groups
# group:user1,user2
[groups]
wheel:

# Containers
# fqdn|*:user,@group
[containers]
*:@wheel

# OpenVZ hosts
# fqdn|localhost:user,@group
[hosts]
localhost:@wheel

EOF
      echo "Template $vzshdini created."
      exit 1
    else
      echo "$vzshdini exists, will not overwrite."
      exit 1
    fi
    break;;

  list)
    (vzlist -Hat -o hostname,ctid,status | sed "s/^/`hostname`\t/")
    break;;

  move)
    vz_checkmanager $user move
    if [ "$vz_return" == "allowed" ]
    then
      live=`vzlist -Hat | grep " ${ct}\$" | awk '{print $4}'`
      if [ "$live" == "running" ]
      then
        live="--live"
      else
        live=""
      fi
      vzmigrate --ssh="-o BatchMode=yes -o StrictHostKeyChecking=no" --remove-area no --keep-dst $live $otherhost $ct
    else
      echo "$0: move denied for $user" 
      exit 1
    fi
    break;;

  run)
    # Run command/start shell in container.
    # Check if user has access to container
    vz_checkperm $user $ct
    if [ "$vz_return" == "allowed" ]
    then
      # Use "exec" instead of "enter" if there is a command to be sent.
      ctlcmd=enter;
      if [ \! "$ccmd" == "" ]
      then
        ctlcmd=exec;
      fi

      vz_runas $user $ct
      if [ \! "$vz_return" == "root" ]; then

        # Force /bin/bash if empty
        if [ "$ccmd" == "" ]
        then
          ccmd="/bin/bash -i";
        fi
        ccmd="su - $vz_return -- -c \"$ccmd\""

        # We need exec to run su
        ctlcmd=exec;

      fi

      vzctl --quiet $ctlcmd $ct $ccmd

    else
      echo "$0: permission denied for $user@$ct" 
      exit 1
    fi
    break;;

  start)
    vz_checkmanager $user startstop
    if [ "$vz_return" == "allowed" ]
    then
      vzctl start $ct
    else
      echo "$0: start $ct denied for $user" 
      exit 1
    fi
    break;;

  stop)
    vz_checkmanager $user startstop
    if [ "$vz_return" == "allowed" ]
    then
      vzctl stop $ct
    else
      echo "$0: stop $ct denied for $user" 
      exit 1
    fi
    break;;

  usage)
    usage
    exit
    break;;
esac

