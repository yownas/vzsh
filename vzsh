#!/bin/sh
# $Id: vzsh,v 1.17 2015/07/16 13:33:55 jonst Exp $

############################
# Variables
############################

hostfile=~/.vz/hosts
keyfile=~/.vz/vzsh-`whoami`-SUFFIX
statefile=~/.vz/ctstate

############################
# Variables (Do not edit)
############################

SSH="ssh -l root -t -i $keyfile"
vzhosts=`cat $hostfile 2> /dev/null| grep -v ^# | grep . | tr '\012' ' ' `

############################
# Functions
############################

# vz_athosts cmd
# Run command on all the hosts.
vz_athosts() {
  cmd=$1
  for vzhost in $vzhosts;
  do
    ($SSH $vzhost $cmd)
  done
}

# vz_getctname ct
# Get fqdn or cid for container from dns or statefile
vz_getctname() {
  ct=$1
  # fqdn/cid?
  if [ "$vz_container" == "" ]; then
    # FQDN?
    vz_container=`grep " $ct " $statefile | awk '{print $2}'`
  fi
  # Try to find container name.
  if [ "$vz_container" == "" ]; then
    vz_container=`getent hosts $ct | awk '{print $2}'`
  fi

  if [ "$vz_container" == "" ]; then
    echo "getctname: Can not find container $vz_container"
    exit 1
  fi

  vz_return=$vz_container
}

# vz_gethost ct
# Get host for container
vz_gethost() {
  ct=$1
  vz_getctname $ct
  cid=$vz_return
  vz_return=`cat $statefile | awk '{print $2" "$1" "$3}' | grep "^$cid " | cut -d" " -f2`
}

# vz_updatestate
# Update containers and their state from all hosts
vz_updatestate() {
  [ -f "$statefile" ] && rm -f $statefile
  touch $statefile

  # No not steal stdin. Get list of containers from all the hosts.
  echo "" | vz_athosts list >> $statefile 2> /dev/null
}

# usage
# Print usage
usage() {
	cat <<EOF
VZ shell

Usage: $0 [options] [action]

Options:
	-k suffix
		Select key to use.
	-u
		Do not update container states.

Actions:
	[-r] container [command]
		Run command/shell in container.
	-x container [command]
		Run command/shell in container with X11 forwarding.
	-l
		Show list of all containers on all hosts.
	-g [suffix]
		Generate ssh-keyspairs. After keys been generated
		distribute your ${keyfile}.pub to all vz-hosts
		you need to access. Admin also has to update
		vzshd.ini to give you persmissions.
	-t
		Create folder and empty hostfile-template, implies -g.
	-h container [command]
		Run command/shell on host of container.
	-?
		Show this.
EOF
}

############################
# Main
############################

# Defaults
action=run
update=true
# If needconf is set to yes we do need config-files.
needconf=yes

if [ -z "$1" ]
then
  action=usage
  needconf=no
else
  for opt in $@; do
    case "$opt" in
      -g) action=genkeys; shift; keysuffix=$1 needconf=no; shift; break;;
      -h) action=hostrun; ct=#; shift;;
      -\?) action=usage; needconf=no; shift; break;;
      -l) action=list; shift;;
      -r) action=run; ct=#; shift;;
      -t) action=template; needconf=no; shift;;
      -u) update=false; shift;;
      -x) action=xrun; ct=#; shift;;
      *) ct=$1; shift; ccmd=$*; break;;
    esac
  done

  # Containername needed but not provided.
  if [ "$ct" == "#" ]; then
    action=usage
    needconf=no
  fi
fi

# Set default key suffix if none is given.
[ -z "$keysuffix" ] && keysuffix=user 
keyfile=`echo $keyfile | sed "s/SUFFIX/${keysuffix}/"`

if [ "$needconf" == "yes" ]
then
  # Sanity checks
  if [ \! -s "$hostfile" ]
  then
    usage
    echo ""
    echo "ERROR: $hostfile missing or empty."
    exit 1
  fi

  if [ \! -s "$keyfile" -o \! -s "${keyfile}.pub" ]
  then
    usage
    echo ""
    echo "ERROR: $keyfile or ${keyfile}.pub missing or empty."
    echo "Generate key-pair with: $0 -g"
    exit 1
  fi
fi

case "$action" in
  genkeys)
    if [ -f "${keyfile}" -o -f "${keyfile}.pub" ]; then
      echo "Keyfiles $keyfile or ${keyfile}.pub exists."
      echo "Remove if you want to generate a new one.."
      echo ""
      cat ${keyfile}.pub
      echo ""
      exit 1
    fi
    ssh-keygen -q -C `echo $keyfile | sed 's#^.*/##'` -f $keyfile -N '' && (
      echo "$keyfile generated"
      perl -pi -e "s#^#command=\"~/bin/vzshd user=`whoami`\" #" ${keyfile}.pub
      echo ""
      echo "Distribute this to ~root/.ssh/authorized_keys on all vz-hosts:"
      echo ""
      cat ${keyfile}.pub
      echo ""
    )
    ;;
  hostrun)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then
      $SSH $vzhost hostrun $ccmd
    else
      echo "hostrun: Container host not found."
      exit 1
    fi
    ;;
  list)
    [ "$update" == "true" ] && vz_updatestate
    cat $statefile
    ;;
  run)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then
      $SSH $vzhost run $ct $ccmd
    else
      echo "run: Container host not found."
      exit 1
    fi
    ;;
  template)
    # Check if config exists, otherwise create a new one.
    tmp_dir="`echo $hostfile | sed 's#/[^/]*$##'`"
    if [ \! -d "$tmp_dir" ]
    then
      mkdir -p "$tmp_dir"
      touch $hostfile
      cat <<EOF
$0: $tmp_dir & $hostfile created.

IMPORTANT! You need to add OpenVZ hosts to this file.

EOF
    fi
    $0 -g
    ;;
  usage)
    usage
    exit
    ;;
  xrun)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then
      ssh-keygen -q -f ${keyfile}.tmp$$ -N "" -C vzsh-tmpkey$$ -b 768
      ssh -i ${keyfile}.tmp$$ -X -o "StrictHostKeyChecking=no" -o "ProxyCommand $SSH $vzhost run $ct \"(echo `cat ${keyfile}.tmp$$.pub` > /root/.vzsh.tmp$$.pub);sshd -i -o AuthorizedKeysFile=/root/.vzsh.tmp$$.pub;rm /root/.vzsh.tmp$$.pub\"" -l root $ct $ccmd
      rm -f ${keyfile}.tmp$$ ${keyfile}.tmp$$.pub 
    else
      echo "xrun: Container not found."
      exit 1
    fi
    ;;
esac

