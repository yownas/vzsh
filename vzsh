#!/bin/sh

############################
# Variables
############################

hostfile=~/.vz/hosts
keyfile_name=~/.vz/vzsh-`whoami`-SUFFIX
statefile=~/.vz/ctstate

############################
# Variables (Do not edit)
############################

#vzhosts=`cat $hostfile 2> /dev/null| grep -v ^# | grep . | tr '\012' ' ' `
vzhosts=`cat $hostfile 2> /dev/null| awk '/^[^#]/{print $1}' | tr '\012' ' ' `

############################
# Functions
############################

# vz_athosts cmd
# Run command on all the hosts.
vz_athosts() {
  cmd=$1
  shift
  ccmd=$*
  for vzhost in $vzhosts;
  do
    if [  "$prefix" == "true" -a "$cmd" == "hostrun" ];
    then
      ($SSH $vzhost $cmd $ccmd | sed "s/^/$vzhost /")
    else
      ($SSH $vzhost $cmd $ccmd)
    fi
  done
}

# vz_getctname ct
# Get fqdn or cid for container from dns or statefile
vz_getctname() {
  ct=$1
  # fqdn/cid?
  vz_container=`grep " $ct " $statefile | awk '{print $2}'`

  # Try to find container name.
  if [ "$vz_container" == "" ]; then
    vz_container=`getent hosts $ct | awk '{print $2}'`
  fi

  if [ "$vz_container" == "" ]; then
    echo "getctname: Can not find container $ct"
    exit 1
  fi

  vz_return=$vz_container
}

# vz_gethost ct
# Get host for container
vz_gethost() {
  ct=$1
  vz_getctname $ct
  cid=$vz_return
  vz_return=`cat $statefile | awk '{print $2" "$1" "$3}' | grep "^$cid " | cut -d" " -f2`
}

# vz_updatestate
# Update containers and their state from all hosts
vz_updatestate() {
  [ -f "$statefile" ] && rm -f $statefile
  touch $statefile

  # No not steal stdin. Get list of containers from all the hosts.
  echo "" | vz_athosts list 2> /dev/null | tr '\t' ' ' >> $statefile
}

# usage
# Print usage
usage() {
	cat <<EOF
VZ shell

Usage: $0 [options] [action]

Options:
	-k suffix
		Select key to use.
        -p
		Show hostname as prefix when using -m athosts
	-u
		Do not update container states.
	-q
		Be quiet.

Actions:
	[-r] container [command]
		Run command/shell in container.
	-x container [command]
		Run command/shell in container with X11 forwarding.
	-l
		Show list of all containers on all hosts.
	-m move container host
		Move container to host.
	-m moveall host1 host2 [host3]
		Move all containers from host1 to host2 [and host3]
	-m start container
		Start container
	-m stop container
		Stop container
        -m athosts command
                Run command on all hosts.
	-g [suffix]
		Generate ssh-keyspairs. After keys been generated
		distribute your ${keyfile}.pub
                to all vz-hosts you need to access. Admin also has to
                update vzshd.ini to give you persmissions.
	-t
		Create folder and empty hostfile-template, implies -g.
	-h container [command]
		Run command/shell on host of container.
	-?
		Show this.
EOF
}

############################
# Main
############################

# Defaults
action=run
update=true
[ "$VZSHUPDATE" == "0" -o "$VZSH_UPDATE" == "false" ] && update=false
prefix=false
quiet=false
# If needconf is set to yes we do need config-files.
needconf=yes

if [ -z "$1" ]
then
  action=usage
  needconf=no
else
  while [ \! -z "$*" ]; do
    case "$1" in
      -g)
        action=genkeys;
        shift;
        [ -z "$keysuffix" ] && keysuffix=$1;
        needconf=no;
        break;;
      -h) action=hostrun; shift; ct=$1; shift; ccmd=$*; shift $#; break;;
      -\?) action=usage; needconf=no; shift; break;;
      -k) shift; keysuffix=$1; shift;;
      -l) action=list; shift;;
      -m)
        action=manage;
        shift;
        ccmd=$1;
        shift;
        ct=$1;
        shift;
        otherhosts=$*;
        break;;
      -p) prefix=true; shift;;
      -q) quiet=true; shift;;
      -r) action=run; shift; ct=$1; shift; ccmd=$*; break;;
      -t) action=template; needconf=no; shift;;
      -u) update=false; shift;;
      -x) action=xrun; shift; ct=$1; shift; ccmd=$*; break;;
      *) ct=$1; shift; ccmd=$*; break;;
    esac
  done
fi

# Set key suffix from ENV or use default if none is given.
[ -z "$keysuffix" ] && keysuffix=$VZSH_KEY 
[ -z "$keysuffix" ] && keysuffix=user 
keyfile=`echo $keyfile_name | sed "s/SUFFIX/${keysuffix}/"`

# Set ssh-command to use now when we know which key to use.
SSH="ssh -l root -t -o PasswordAuthentication=no -o ConnectTimeout=3 -o LogLevel=QUIET -i $keyfile"

if [ "$needconf" == "yes" ]
then
  # Sanity checks
  if [ \! -s "$hostfile" ]
  then
    usage
    echo ""
    echo "ERROR: $hostfile missing or empty."
    exit 1
  fi

  if [ \! -s "$keyfile" -o \! -s "${keyfile}.pub" ]
  then
    usage
    echo ""
    echo "ERROR: $keyfile or ${keyfile}.pub missing or empty."
    echo "Generate key-pair with: $0 -g"
    exit 1
  fi
fi

case "$action" in
  genkeys)
    if [ -f "${keyfile}" -o -f "${keyfile}.pub" ]; then
      if [ "$quiet" == "false" ]; then
        echo "Keyfiles $keyfile or ${keyfile}.pub exists."
        echo "Remove if you want to generate a new one.."
        echo ""
        cat ${keyfile}.pub
        echo ""
      fi
      exit 1
    fi
    keyusername=`whoami`
    if [ \! "$keysuffix" == "user" ]
    then
      keyusername="${keyusername}_${keysuffix}"
    fi
    ssh-keygen -q -t rsa -C `echo $keyfile | sed 's#^.*/##'` -f $keyfile -N '' && (

      # Unless this is the X11-key, add the command-argument
      if [ \! "$keysuffix" == "X11" ]; then
        perl -pi -e "s#^#command=\"~/bin/vzshd user=${keyusername}\" #" ${keyfile}.pub
      fi

      if [ "$quiet" == "false" ]; then
        echo "$keyfile generated"
        echo ""
        echo "Distribute this to ~root/.ssh/authorized_keys on all vz-hosts:"
        echo ""
        cat ${keyfile}.pub
        echo ""
      fi
    )
    ;;
  hostrun)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then
      $SSH $vzhost hostrun $ccmd
    else
      echo "hostrun: Container host not found."
      exit 1
    fi
    ;;
  list)
    [ "$update" == "true" ] && vz_updatestate
    cat $statefile
    ;;
  manage)
    [ "$update" == "true" ] && vz_updatestate
    case "$ccmd" in
      # move, start & stop have similar arguments.
      # Treat them all the same way.
      move|start|stop)
        vz_getctname $ct
        ct=$vz_return
        vz_gethost $ct
        vzhost=$vz_return
        if [ ! "$vzhost" == "" ]
        then
          $SSH $vzhost $ccmd $ct $otherhosts
        else
          echo "manage: Container host not found."
          exit 1
        fi
        ;;
      moveall)
        vzhost=$ct
        $SSH $vzhost $ccmd $otherhosts
        ;;
      athosts)
        # $ct & $otherhosts contain the command to run
        vz_athosts hostrun $ct $otherhosts 
        ;;
      *)
        echo "manage: Unknown command: $ccmd"
        exit 1
        ;;
    esac
    ;;
  run)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then
      $SSH $vzhost run $ct $ccmd
    else
      echo "run: Container host not found."
      exit 1
    fi
    ;;
  template)
    # Check if config exists, otherwise create a new one.
    tmp_dir="`echo $hostfile | sed 's#/[^/]*$##'`"
    if [ \! -d "$tmp_dir" ]
    then
      mkdir -p "$tmp_dir"
      touch $hostfile
      cat <<EOF
$0: $tmp_dir & $hostfile created.

IMPORTANT! You need to add OpenVZ hosts to this file.

EOF
    fi
    # Generate X11-keys
    $0 -q -g X11
    # Generate user-keys
    $0 -g user
    ;;
  usage)
    usage
    exit
    ;;
  xrun)
    [ "$update" == "true" ] && vz_updatestate
    vz_getctname $ct
    ct=$vz_return
    vz_gethost $ct
    vzhost=$vz_return
    if [ ! "$vzhost" == "" ]
    then

      # Find X11-key
      xkey=`echo $keyfile_name | sed "s/SUFFIX/X11/"`

      if [ \! -f "${xkey}" -o \! -f "${xkey}.pub" ]; then
        echo "Can not find X11-keys!"
        echo "Please generate a key-pair with:"
        echo "$0 -g X11"
        echo "(You do not need to distribute these keys.)"
        exit 1
      fi

      # Connect and find out paths and remote username.
      gecos=`$SSH $vzhost run $ct 'getent passwd \`whoami\`'`

      remote_user=`echo $gecos|cut -d: -f 1`
      remote_home=`echo $gecos|cut -d: -f 6`

      # Create folder and copy temporary host-key
      cat ${xkey} | $SSH $vzhost run $ct "(mkdir ${remote_home}/.vz 2>/dev/null);cat > ${remote_home}/.vz/x11.tmp$$"

      # Write X11-keys, start remote sshd and connect using a dummy name.
      ssh -i ${xkey} -XY -o "StrictHostKeyChecking=no" -o "ProxyCommand $SSH $vzhost run $ct \"chmod 700 ${remote_home}/.vz;(echo `tr -d '\012' < ${xkey}.pub` > ${remote_home}/.vz/x11.tmp$$.pub);chmod 600 ${remote_home}/.vz/x11.tmp$$;/usr/sbin/sshd -i -o HostKey=${remote_home}/.vz/x11.tmp$$ -o AuthorizedKeysFile=${remote_home}/.vz/x11.tmp$$.pub -o UsePrivilegeSeparation=no -o UsePAM=no;rm ${remote_home}/.vz/x11.tmp$$.pub ${remote_home}/.vz/x11.tmp$$\"" -l $remote_user vzsh-x11-connection $ccmd

    else
      echo "xrun: Container not found."
      exit 1
    fi
    ;;
esac

